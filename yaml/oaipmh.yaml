oai:
    info:
        ## Information reported for `verb=Identify`
        # (deletedRecord is provided by the deletedClass)
        repositoryName: ARCHE
        baseURL: https://arche.acdh.oeaw.ac.at/oaipmh/
        earliestDatestamp: "1900-01-01T00:00:00Z"
        adminEmail: acdh-tech@oeaw.ac.at
        granularity: YYYY-MM-DDThh:mm:ssZ
    # Repository database connection data
    dbConnStr: "pgsql: user=guest dbname=www-data host=127.0.0.1"
    # Cache dir - leave empty not to use cache
    cacheDir: ""
    # Logging settings
    logging:
        file: /home/www-data/log/oaipmh.log
        level: info
    deleted:
        # Class implementing deleted resources handling. There are two implementations
        # available:
        # - \acdhOeaw\oai\deleted\No - when the feature is not supported
        # - \acdhOeaw\oai\deleted\Tombstone - when resources in the tombstone state
        #   should be reported as deleted
        # - \acdhOeaw\oai\deleted\RdfProperty - when the deleted resources have a given
        #   RDF property values (and not deleted resources don't)
        deletedClass: \acdhOeaw\oai\deleted\Tombstone
        # Value to be reported for the `deletedRecord` property for the OAI-PMH 
        # `identify` request (can be "transient" or "persistent" - 
        # see https://www.openarchives.org/OAI/openarchivesprotocol.html#DeletedRecords).
        # Needed only if `oaiDeletedClass` other then "acdhOeaw\oai\deleted\no".
        deletedRecord: transient
        # RDF property indicating a resource is deleted
        # Needed only if `oaiDeletedClass` equals "acdhOeaw\oai\deleted\RdfProperty".
        deletedProp: https://vocabs.acdh.oeaw.ac.at/schema#isDeleted
        # `deletedProp` RDF property value indicating a resource is deleted. If empty,
        # the existence of the `deletedProp` will be reported as a deletion state
        # Needed only if `oaiDeletedClass` equals "acdhOeaw\oai\deleted\RdfProperty".
        deletedPropValue: ''
    search:
        # Class used to implement the search.
        # There is only one implementation provided \acdhOeaw\oai\search\BaseSearch.
        # If it doesn't fit your needs, provide your own and update this property.
        searchClass: \acdhOeaw\oai\search\BaseSearch
        # RDF property storing last modification date
        dateProp: https://vocabs.acdh.oeaw.ac.at/schema#hasUpdatedDate
        # Namespace of the identfier to be used as the OAI-PMH resource id
        idNmsp: http://hdl.handle.net/
        # Required repository-related settings
        idProp: https://vocabs.acdh.oeaw.ac.at/schema#hasIdentifier
        repoBaseUrl: https://arche.acdh.oeaw.ac.at/api/
    sets:
        # Class implementing sets. There are four implementations available:
        # - \acdhOeaw\oai\set\NoSets - when your repository doesn't use sets
        # - \acdhOeaw\oai\set\Simple - when the set(s) resource belongs to is denoted
        #   by a given RDF property value(s) but there is no other iformation about
        #   the sets (<setName> equals <setSet>, no <setDescription> in reply to ListSets OAI-PMH request)
        # - \acdhOeaw\oai\set\Complex - when a given RDF property points to other
        #   repository resource describing the set. In this case full set information
        #   can be provided in reply to ListSets OAI-PMH request but of course corresponding
        #   resources describing sets must exist in your repository. <setDescripiotn> is
        #   gathered using the `\acdhOeaw\oai\metadata\DcMetadata` class created for the
        #   resource describing a set.
        # If none of them fits your needs, provide your own implementation and update this property.
        setClass: \acdhOeaw\oai\set\Simple
        # Only when class equals \acdhOeaw\oai\set\Simple or \acdhOeaw\oai\set\Complex
        # RDF property denoting sets the resource is part of
        setProp: https://vocabs.acdh.oeaw.ac.at/schema#hasOaiSet
        # Only when class equals \acdhOeaw\oai\set\Complex
        # RDF property storing OAI-PMH <setSpec> value:
        #   [setResource] --oaiSetSpecProp--> setSpecValue
        setSpecProp: https://vocabs.acdh.oeaw.ac.at/schema#hasDescription
        # Only when class equals \acdhOeaw\oai\set\Complex
        # RDF property storing OAI-PMH <setName> value
        #   [setResource] --oaiSetTitleProp--> setTitleValue
        setNameProp: https://vocabs.acdh.oeaw.ac.at/schema#hasTitle
        # Only when class equals \acdhOeaw\oai\set\Simple
        # Namespace of the resource identifiers storing the set name
        #   (in case sets are denoted using relations instead of literal values)
        setNameNamespace: https://vocabs.acdh.oeaw.ac.at/archeoaisets/
    ## Metadata formats description
    # 
    # Each section describes a single metadata format:
    # - Section name is not important (it has to be unique but nothing more then that).
    # - `metadataPrefix`, `schema` and `metadataNamespace` configuration properties 
    #   are simply OAI properties reported for `verb=ListMetadataFormats`
    # - `class`  configuration property denotes a PHP class implementing the given metadata format.
    #   At the moment six classes are available:
    #   - `\acdhOeaw\oai\metatada\DcMetata` - takes resource's RDF metadata and 
    #     extracts all RDF properties in `dc` and `dcterms` namespaces.
    #     Doesn't require any additional configuration properties.
    #   - `\acdhOeaw\oai\metatada\AcdhDcMetata` - takes resource's RDF metadata and 
    #     extracts all RDF properties either being in `dc` and `dcterms` namespaces
    #     or having mappings to `dc`/`dcterms` properties.
    #     References to other resources can be handled either by providing their URLs,
    #     or their titles or both.
    #     Requires additional configuration properties: `eqProp`, `acdhNmsp`, 
    #     `titleProp` and `mode`.
    #   - `\acdhOeaw\oai\metadata\RdfXml` - takes resource's RDF metadata and serialises
    #     them as an RDF-XML.
    #     Doesn't require any additional configuration properties.
    #   - `\acdhOeaw\oai\metadata\ResMetadata` - fetches metadata from a binary 
    #     content of another repository resource:
    #       [oaiRes]  --format.metaResProp--> metaRes
    #       [metaRes] binary contains XML with the metadata
    #     Requires additional configuration properties: `metaResProp` and `requestOptions`.
    #   - `\acdhOeaw\oai\metadata\CmdiMetadata` - fetches metadata from a binary
    #     content of another repository resource checking if schema match requested
    #     format schema:
    #       [oaiRes]  --format.metaResProp-->    metaRes
    #       [metaRes] --format.cmdiSchemaProp--> format.schema
    #       [metaRes] binary contains XML with the metadata
    #     Requires additional configuration properties: `metaResProp`, `cmdiSchemaProp`,
    #     `requestOptions` and `schema`.
    #   - `\acdhOeaw\oai\metadata\LiveCmdiMetadata` - generates metadata by filling up
    #     CMDI XML templates with resource's metadata values
    #     Requires additional configuration properties: `uriProp`, `labelProp`, 
    #     `schemaProp`, `templateDir` and `defaultLang`.
    #     The `propNmsp[]`, `schemaEnforce` and `schemaDefault` configuration properties are optional.
    # - ... other properties required by class handling given metadata format
    #   (see classes documentation)
    formats:
        oai_dc:
            metadataPrefix: oai_dc
            schema: http://www.openarchives.org/OAI/2.0/oai_dc.xsd
            metadataNamespace: http://www.openarchives.org/OAI/2.0/oai_dc/
            class: \acdhOeaw\oai\metadata\LiveCmdiMetadata
            uriProp: https://vocabs.acdh.oeaw.ac.at/schema#hasPid
            idProp: https://vocabs.acdh.oeaw.ac.at/schema#hasIdentifier
            labelProp: https://vocabs.acdh.oeaw.ac.at/schema#hasTitle
            defaultLang: en
            templateDir: /home/www-data/vendor/acdh-oeaw/arche-oaipmh/src/acdhOeaw/oai/metadata/liveCmdi
            schemaProp: https://vocabs.acdh.oeaw.ac.at/schema#hasSchema
            schemaDefault: oai_dc
            schemaEnforce: ""
            propNmsp:
                acdh: https://vocabs.acdh.oeaw.ac.at/schema#
        rdfxml:
            metadataPrefix: rdfxml
            schema: https://arche.acdh.oeaw.ac.at/
            metadataNamespace: https://vocabs.acdh.oeaw.ac.at/#schema
            class: \acdhOeaw\oai\metadata\RdfXml
        cmdi:
            metadataPrefix: cmdi
            schema: http://catalog.clarin.eu/ds/ComponentRegistry/rest/registry/profiles/clarin.eu:cr1:p_1288172614023/xsd
            metadataNamespace: http://www.clarin.eu/cmd/1
            class: \acdhOeaw\oai\metadata\LiveCmdiMetadata
            # RDF property used as `cmd:ResourceRef` CMDI value
            uriProp: https://vocabs.acdh.oeaw.ac.at/schema#hasPid
            # idProp and labelProp are used to fetch URI labels (e.g. fetch name of a resource creator)
            # They are tightly coupled with the metadata repository structure used by the ACDH:
            #   resIdUri <--idProp-- res --labelProp--> label
            idProp: https://vocabs.acdh.oeaw.ac.at/schema#hasIdentifier
            labelProp: https://vocabs.acdh.oeaw.ac.at/schema#hasTitle
            # Default language used to map multilingual metadata properties to CMDI elements of cardinality 1
            defaultLang: en
            # Path to the directory storing CMDI XML templates
            templateDir: /home/www-data/vendor/acdh-oeaw/arche-oaipmh/src/acdhOeaw/oai/metadata/liveCmdi
            # Metadata property prividng the CMDI schema to be used for a given resource
            schemaProp: https://vocabs.acdh.oeaw.ac.at/schema#hasSchema
            # Namespace prefixes used in template file's metadata property placeholders
            propNmsp:
                acdh: https://vocabs.acdh.oeaw.ac.at/schema#
            # Default CMDI schema to be used when a resource doesn't have the `schemaProp` metadatada property or it points to a schema without a tempalte
            schemaDefault: clarin.eu:cr1:p_1288172614023
            # Handle only resources having `schemaProp` metadata property value equal to the `schemaEnforce` value.
            schemaEnforce: ""
        kulturpool:
            metadataPrefix: kulturpool
            metadataNamespace: http://we.do.not.care
            schema: http://we.do.not.have.an.xsd
            class: \acdhOeaw\oai\metadata\LiveCmdiMetadata
            # RDF property used as `cmd:ResourceRef` CMDI value
            uriProp: https://vocabs.acdh.oeaw.ac.at/schema#hasPid
            # idProp and labelProp are used to fetch URI labels (e.g. fetch name of a resource creator)
            # They are tightly coupled with the metadata repository structure used by the ACDH:
            #   resIdUri <--idProp-- res --labelProp--> label
            idProp: https://vocabs.acdh.oeaw.ac.at/schema#hasIdentifier
            idNmsp: https://id.acdh.oeaw.ac.at/
            labelProp: https://vocabs.acdh.oeaw.ac.at/schema#hasTitle
            iiifBaseUrl: 'https://loris.acdh.oeaw.ac.at/uuid:'
            # Default language used to map multilingual metadata properties to CMDI elements of cardinality 1
            defaultLang: en
            # Path to the directory storing CMDI XML templates
            templateDir: /home/www-data/vendor/acdh-oeaw/arche-oaipmh/src/acdhOeaw/oai/metadata/liveCmdi
            # Metadata property prividng the CMDI schema to be used for a given resource
            schemaProp: http://can.not.be.overwritten
            # Namespace prefixes used in template file's metadata property placeholders
            propNmsp:
                acdh: https://vocabs.acdh.oeaw.ac.at/schema#
                skos: http://www.w3.org/2004/02/skos/core#
            # Default CMDI schema to be used when a resource doesn't have the `schemaProp` metadatada property or it points to a schema without a tempalte
            schemaDefault: kulturpool
            # Handle only resources having `schemaProp` metadata property value equal to the `schemaEnforce` value.
            schemaEnforce: ""
